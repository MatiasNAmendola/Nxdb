<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>

<title>C:/Code/Nxdb/Nxdb/Conversions.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<!-- Generated by Doxygen 1.8.0 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Events</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">C:/Code/Nxdb/Nxdb/Conversions.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_conversions_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 ï»¿<span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright 2012 WildCard, LLC</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
<a name="l00005"></a>00005 <span class="comment"> * you may not use this file except in compliance with the License.</span>
<a name="l00006"></a>00006 <span class="comment"> * You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> * </span>
<a name="l00008"></a>00008 <span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> * </span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> */</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="keyword">using</span> System;
<a name="l00019"></a>00019 <span class="keyword">using</span> System.Collections;
<a name="l00020"></a>00020 <span class="keyword">using</span> System.Collections.Generic;
<a name="l00021"></a>00021 <span class="keyword">using</span> System.Linq;
<a name="l00022"></a>00022 <span class="keyword">using</span> System.Text;
<a name="l00023"></a>00023 <span class="keyword">using</span> System.Xml;
<a name="l00024"></a>00024 <span class="keyword">using</span> java.math;
<a name="l00025"></a>00025 <span class="keyword">using</span> javax.xml.datatype;
<a name="l00026"></a>00026 <span class="keyword">using</span> javax.xml.@<span class="keyword">namespace</span>;
<a name="l00027"></a>00027 <span class="keyword">using</span> org.basex.query.func;
<a name="l00028"></a>00028 <span class="keyword">using</span> org.basex.query.item;
<a name="l00029"></a>00029 
<a name="l00030"></a><a class="code" href="namespace_nxdb.htm">00030</a> <span class="keyword">namespace </span>Nxdb
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032     <span class="comment">//Extensions to help convert between .NET, Java, and BaseX objects</span>
<a name="l00033"></a>00033     <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">class </span>Conversions
<a name="l00034"></a>00034     {
<a name="l00035"></a>00035         <span class="comment">//A couple extension methods to help with the tokenizing of strings</span>
<a name="l00036"></a>00036         <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keywordtype">string</span> Token(<span class="keyword">this</span> byte[] bytes)
<a name="l00037"></a>00037         {
<a name="l00038"></a>00038             <span class="keywordflow">return</span> org.basex.util.Token.@string(bytes);
<a name="l00039"></a>00039         }
<a name="l00040"></a>00040 
<a name="l00041"></a>00041         <span class="keyword">internal</span> <span class="keyword">static</span> byte[] Token(<span class="keyword">this</span> <span class="keywordtype">string</span> str)
<a name="l00042"></a>00042         {
<a name="l00043"></a>00043             <span class="keywordflow">return</span> org.basex.util.Token.token(str);
<a name="l00044"></a>00044         }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046         <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keywordtype">object</span> ToObject(<span class="keyword">this</span> Value value)
<a name="l00047"></a>00047         {
<a name="l00048"></a>00048             <span class="comment">//Check for null/empty</span>
<a name="l00049"></a>00049             <span class="keywordflow">if</span> (value == null)
<a name="l00050"></a>00050             {
<a name="l00051"></a>00051                 <span class="keywordflow">return</span> null;
<a name="l00052"></a>00052             }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054             <span class="comment">//Is it a sequence?</span>
<a name="l00055"></a>00055             Seq seq = value as Seq;
<a name="l00056"></a>00056             <span class="keywordflow">if</span> (seq != null)
<a name="l00057"></a>00057             {
<a name="l00058"></a>00058                 <span class="keywordflow">return</span> <span class="keyword">new</span> IterEnum(seq.iter());
<a name="l00059"></a>00059             }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061             <span class="comment">// Is it a node?</span>
<a name="l00062"></a>00062             ANode node = value as ANode;
<a name="l00063"></a>00063             <span class="keywordflow">if</span> (node != null)
<a name="l00064"></a>00064             {
<a name="l00065"></a>00065                 <span class="keywordflow">return</span> Node.Node.Get(node);
<a name="l00066"></a>00066             }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068             <span class="comment">// Get the Java object</span>
<a name="l00069"></a>00069             <span class="keywordtype">object</span> obj = value.toJava();
<a name="l00070"></a>00070 
<a name="l00071"></a>00071             <span class="comment">// Clean up non-.NET values</span>
<a name="l00072"></a>00072             <span class="keywordflow">if</span> (obj is java.lang.Number)
<a name="l00073"></a>00073             {
<a name="l00074"></a>00074                 <span class="keywordtype">int</span> i;
<a name="l00075"></a>00075                 <span class="keywordtype">double</span> d;
<a name="l00076"></a>00076                 <span class="keywordflow">if</span>(<span class="keywordtype">int</span>.TryParse(obj.ToString(), out i))
<a name="l00077"></a>00077                 {
<a name="l00078"></a>00078                     obj = i;
<a name="l00079"></a>00079                 }
<a name="l00080"></a>00080                 <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<span class="keywordtype">double</span>.TryParse(obj.ToString(), out d))
<a name="l00081"></a>00081                 {
<a name="l00082"></a>00082                     obj = d;
<a name="l00083"></a>00083                 }
<a name="l00084"></a>00084                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is BigInteger)
<a name="l00085"></a>00085                 {
<a name="l00086"></a>00086                     BigInteger bigInteger = (BigInteger)obj;
<a name="l00087"></a>00087                     obj = Convert.ToDecimal(bigInteger.toString());
<a name="l00088"></a>00088                 }
<a name="l00089"></a>00089                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is BigDecimal)
<a name="l00090"></a>00090                 {
<a name="l00091"></a>00091                     BigDecimal bigDecimal = (BigDecimal)obj;
<a name="l00092"></a>00092                     obj = Convert.ToDecimal(bigDecimal.toString());
<a name="l00093"></a>00093                 }
<a name="l00094"></a>00094             }
<a name="l00095"></a>00095             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is XMLGregorianCalendar)
<a name="l00096"></a>00096             {
<a name="l00097"></a>00097                 XMLGregorianCalendar date = (XMLGregorianCalendar)obj;
<a name="l00098"></a>00098                 obj = XmlConvert.ToDateTime(date.toXMLFormat(), XmlDateTimeSerializationMode.RoundtripKind);
<a name="l00099"></a>00099             }
<a name="l00100"></a>00100             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is Duration)
<a name="l00101"></a>00101             {
<a name="l00102"></a>00102                 Duration duration = (Duration)obj;
<a name="l00103"></a>00103                 obj = XmlConvert.ToTimeSpan(duration.toString());
<a name="l00104"></a>00104             }
<a name="l00105"></a>00105             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is QName)
<a name="l00106"></a>00106             {
<a name="l00107"></a>00107                 QName qname = (QName)obj;
<a name="l00108"></a>00108                 obj = <span class="keyword">new</span> XmlQualifiedName(qname.getLocalPart(), qname.getNamespaceURI());
<a name="l00109"></a>00109             }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111             <span class="keywordflow">return</span> obj;
<a name="l00112"></a>00112         }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         <span class="keyword">internal</span> <span class="keyword">static</span> Value ToValue(<span class="keyword">this</span> <span class="keywordtype">object</span> obj)
<a name="l00115"></a>00115         {
<a name="l00116"></a>00116             <span class="comment">//Is it null?</span>
<a name="l00117"></a>00117             <span class="keywordflow">if</span> (obj == null)
<a name="l00118"></a>00118             {
<a name="l00119"></a>00119                 <span class="keywordflow">return</span> null;
<a name="l00120"></a>00120             }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122             <span class="comment">//Is it already a Value?</span>
<a name="l00123"></a>00123             <span class="keywordflow">if</span> (obj is Value)
<a name="l00124"></a>00124             {
<a name="l00125"></a>00125                 <span class="keywordflow">return</span> (Value)obj;
<a name="l00126"></a>00126             }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128             <span class="comment">//Get the item(s)</span>
<a name="l00129"></a>00129             Item[] items = GetItems(obj).ToArray();
<a name="l00130"></a>00130             <span class="keywordflow">if</span>(items.Length == 0)
<a name="l00131"></a>00131             {
<a name="l00132"></a>00132                 <span class="keywordflow">return</span> Empty.SEQ;
<a name="l00133"></a>00133             }
<a name="l00134"></a>00134             <span class="keywordflow">return</span> items.Length == 1 ? items[0] : Seq.get(items, items.Length);
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137         <span class="comment">//Converts potential sequences into item lists, while flattening to a single dimension</span>
<a name="l00138"></a>00138         <span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;Item&gt; GetItems(<span class="keywordtype">object</span> obj)
<a name="l00139"></a>00139         {
<a name="l00140"></a>00140             <span class="comment">//It it a Node?</span>
<a name="l00141"></a>00141             Node.Node node = obj as Node.Node;
<a name="l00142"></a>00142             <span class="keywordflow">if</span> (node != null)
<a name="l00143"></a>00143             {
<a name="l00144"></a>00144                 <span class="keywordflow">return</span> <span class="keyword">new</span>[]{node.ANode};
<a name="l00145"></a>00145             }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147             <span class="comment">//Is it a Database?</span>
<a name="l00148"></a>00148             <a class="code" href="class_nxdb_1_1_database.htm" title="Represents a single database into which all documents should be stored. The documents in the database...">Database</a> database = obj as <a class="code" href="class_nxdb_1_1_database.htm" title="Represents a single database into which all documents should be stored. The documents in the database...">Database</a>;
<a name="l00149"></a>00149             <span class="keywordflow">if</span>(database != null)
<a name="l00150"></a>00150             {
<a name="l00151"></a>00151                 <span class="keywordflow">return</span> database.<a class="code" href="class_nxdb_1_1_database.htm#a954e6ff08fc713a790ccf68788bcba17" title="Gets all documents in the database.">Documents</a>.Select(d =&gt; d.ANode).Cast&lt;Item&gt;();
<a name="l00152"></a>00152             }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154             <span class="comment">//Is it enumerable (list, array, etc. - but not a string!)</span>
<a name="l00155"></a>00155             <span class="comment">//This is recursive and results in flattening any nested sequences</span>
<a name="l00156"></a>00156             IEnumerable enumerable = obj as IEnumerable;
<a name="l00157"></a>00157             <span class="keywordflow">if</span> (!(obj is <span class="keywordtype">string</span>) &amp;&amp; enumerable != null)
<a name="l00158"></a>00158             {
<a name="l00159"></a>00159                 <span class="keywordflow">return</span> enumerable.Cast&lt;<span class="keywordtype">object</span>&gt;().Select(GetItems).SelectMany(x =&gt; x);
<a name="l00160"></a>00160             }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162             <span class="comment">// Clean up non-.NET values</span>
<a name="l00163"></a>00163             <span class="keywordflow">if</span> (obj is Decimal)
<a name="l00164"></a>00164             {
<a name="l00165"></a>00165                 obj = <span class="keyword">new</span> BigDecimal(obj.ToString());
<a name="l00166"></a>00166             }
<a name="l00167"></a>00167             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is DateTime)
<a name="l00168"></a>00168             {
<a name="l00169"></a>00169                 obj = DatatypeFactory.newInstance().newXMLGregorianCalendar(
<a name="l00170"></a>00170                     ((DateTime)obj).ToString(<span class="stringliteral">&quot;yyyy-MM-ddTHH:mm:ss.fffffffZ&quot;</span>));
<a name="l00171"></a>00171             }
<a name="l00172"></a>00172             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is TimeSpan)
<a name="l00173"></a>00173             {
<a name="l00174"></a>00174                 obj = DatatypeFactory.newInstance().newDuration(
<a name="l00175"></a>00175                     Convert.ToInt64(((TimeSpan)obj).TotalMilliseconds));
<a name="l00176"></a>00176             }
<a name="l00177"></a>00177             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (obj is XmlQualifiedName)
<a name="l00178"></a>00178             {
<a name="l00179"></a>00179                 XmlQualifiedName qname = (XmlQualifiedName)obj;
<a name="l00180"></a>00180                 obj = <span class="keyword">new</span> QName(qname.Namespace, qname.Name);
<a name="l00181"></a>00181             }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183             <span class="comment">//Get the item</span>
<a name="l00184"></a>00184             <span class="keywordflow">return</span> <span class="keyword">new</span> []{JavaMapping.type(obj).cast(obj, null)};
<a name="l00185"></a>00185         }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     }
<a name="l00188"></a>00188 }
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Thu Mar 15 2012 12:17:33 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.0
</small></address>

</body>
</html>
