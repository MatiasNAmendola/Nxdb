<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>

<title>C:/Code/Nxdb/Nxdb/Helper.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<!-- Generated by Doxygen 1.8.0 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Events</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">C:/Code/Nxdb/Nxdb/Helper.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_helper_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 ï»¿<span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright 2012 WildCard, LLC</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
<a name="l00005"></a>00005 <span class="comment"> * you may not use this file except in compliance with the License.</span>
<a name="l00006"></a>00006 <span class="comment"> * You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> * </span>
<a name="l00008"></a>00008 <span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> * </span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> */</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="keyword">using</span> System;
<a name="l00019"></a>00019 <span class="keyword">using</span> System.Collections;
<a name="l00020"></a>00020 <span class="keyword">using</span> System.Collections.Generic;
<a name="l00021"></a>00021 <span class="keyword">using</span> System.IO;
<a name="l00022"></a>00022 <span class="keyword">using</span> System.Linq;
<a name="l00023"></a>00023 <span class="keyword">using</span> System.Text;
<a name="l00024"></a>00024 <span class="keyword">using</span> System.Xml;
<a name="l00025"></a>00025 <span class="keyword">using</span> com.sun.org.apache.xerces.@<span class="keyword">internal</span>.jaxp.datatype;
<a name="l00026"></a>00026 <span class="keyword">using</span> java.math;
<a name="l00027"></a>00027 <span class="keyword">using</span> javax.xml.datatype;
<a name="l00028"></a>00028 <span class="keyword">using</span> javax.xml.@<span class="keyword">namespace</span>;
<a name="l00029"></a>00029 <span class="keyword">using</span> org.basex.query.func;
<a name="l00030"></a>00030 <span class="keyword">using</span> org.basex.query.item;
<a name="l00031"></a>00031 <span class="keyword">using</span> org.basex.query.iter;
<a name="l00032"></a>00032 <span class="keyword">using</span> org.basex.util;
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>Nxdb
<a name="l00035"></a>00035 {
<a name="l00039"></a><a class="code" href="class_nxdb_1_1_helper.htm">00039</a>     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class </span><a class="code" href="class_nxdb_1_1_helper.htm" title="Static class that includes some extension methods and other helper functionality.">Helper</a>
<a name="l00040"></a>00040     {
<a name="l00041"></a>00041         <span class="keyword">private</span> <span class="keyword">static</span> XmlWriterSettings _writerSettings;
<a name="l00042"></a>00042         <span class="keyword">private</span> <span class="keyword">static</span> XmlReaderSettings _readerSettings;
<a name="l00043"></a>00043 
<a name="l00047"></a>00047         <span class="keyword">public</span> <span class="keyword">static</span> XmlWriterSettings <a class="code" href="class_nxdb_1_1_helper.htm#a679cde0b0a51a95a506849732af69762" title="Gets an instance of very permissive XmlWriterSettings designed to restrict post-processing by an XmlW...">WriterSettings</a>
<a name="l00048"></a><a class="code" href="class_nxdb_1_1_helper.htm#a679cde0b0a51a95a506849732af69762">00048</a>         {
<a name="l00049"></a>00049             <span class="keyword">get</span>
<a name="l00050"></a>00050             {
<a name="l00051"></a>00051                 <span class="keywordflow">if</span> (_writerSettings == null)
<a name="l00052"></a>00052                 {
<a name="l00053"></a>00053                     _writerSettings = <span class="keyword">new</span> XmlWriterSettings();
<a name="l00054"></a>00054                     _writerSettings.Indent = <span class="keyword">false</span>;
<a name="l00055"></a>00055                     _writerSettings.OmitXmlDeclaration = <span class="keyword">true</span>;
<a name="l00056"></a>00056                     _writerSettings.CheckCharacters = <span class="keyword">false</span>;
<a name="l00057"></a>00057                     _writerSettings.NewLineHandling = NewLineHandling.None;
<a name="l00058"></a>00058                     _writerSettings.NewLineOnAttributes = <span class="keyword">false</span>;
<a name="l00059"></a>00059                     _writerSettings.ConformanceLevel = ConformanceLevel.Auto;
<a name="l00060"></a>00060                 }
<a name="l00061"></a>00061                 <span class="keywordflow">return</span> _writerSettings;
<a name="l00062"></a>00062             }
<a name="l00063"></a>00063         }
<a name="l00064"></a>00064 
<a name="l00068"></a>00068         <span class="keyword">public</span> <span class="keyword">static</span> XmlReaderSettings <a class="code" href="class_nxdb_1_1_helper.htm#abe57934f348d632d780bbe287752f4fe" title="Gets an instance of very permissive XmlReaderSettings designed to restrict post-processing by an XmlR...">ReaderSettings</a>
<a name="l00069"></a><a class="code" href="class_nxdb_1_1_helper.htm#abe57934f348d632d780bbe287752f4fe">00069</a>         {
<a name="l00070"></a>00070             <span class="keyword">get</span>
<a name="l00071"></a>00071             {
<a name="l00072"></a>00072                 <span class="keywordflow">if</span> (_readerSettings == null)
<a name="l00073"></a>00073                 {
<a name="l00074"></a>00074                     _readerSettings = <span class="keyword">new</span> XmlReaderSettings();
<a name="l00075"></a>00075                     _readerSettings.IgnoreComments = <span class="keyword">false</span>;
<a name="l00076"></a>00076                     _readerSettings.IgnoreProcessingInstructions = <span class="keyword">false</span>;
<a name="l00077"></a>00077                     _readerSettings.IgnoreWhitespace = <span class="keyword">false</span>;
<a name="l00078"></a>00078                     _readerSettings.CheckCharacters = <span class="keyword">false</span>;
<a name="l00079"></a>00079                     _readerSettings.ConformanceLevel = ConformanceLevel.Fragment;
<a name="l00080"></a>00080                 }
<a name="l00081"></a>00081                 <span class="keywordflow">return</span> _readerSettings;
<a name="l00082"></a>00082             }
<a name="l00083"></a>00083         }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <span class="keyword">internal</span> <span class="keyword">static</span> NodeCache GetNodeCache(IEnumerable&lt;Node.Node&gt; nodes)
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087             <span class="keywordflow">return</span> GetNodeCache(nodes.Select(n =&gt; n.ANode).ToArray());
<a name="l00088"></a>00088         }
<a name="l00089"></a>00089         
<a name="l00090"></a>00090         <span class="keyword">internal</span> <span class="keyword">static</span> NodeCache GetNodeCache(params ANode[] nodes)
<a name="l00091"></a>00091         {
<a name="l00092"></a>00092             <span class="keywordflow">return</span> <span class="keyword">new</span> NodeCache(nodes, nodes.Length);
<a name="l00093"></a>00093         }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <span class="keyword">internal</span> <span class="keyword">static</span> NodeCache GetNodeCache(XmlReader reader)
<a name="l00096"></a>00096         {
<a name="l00097"></a>00097             IList&lt;ANode&gt; nodes = GetNodes(reader);
<a name="l00098"></a>00098             <span class="keywordflow">return</span> nodes != null ? <span class="keyword">new</span> NodeCache(nodes.ToArray(), nodes.Count) : null;
<a name="l00099"></a>00099         }
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <span class="keyword">internal</span> <span class="keyword">static</span> ANode[] GetNodes(IEnumerable&lt;Node.Node&gt; nodes)
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103             <span class="keywordflow">return</span> nodes.Select(n =&gt; n.ANode).ToArray();
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106         <span class="keyword">internal</span> <span class="keyword">static</span> ANode[] GetNodes(XmlReader reader)
<a name="l00107"></a>00107         {
<a name="l00108"></a>00108             List&lt;ANode&gt; nodes = <span class="keyword">new</span> List&lt;ANode&gt;();
<a name="l00109"></a>00109             Stack&lt;FElem&gt; parents = <span class="keyword">new</span> Stack&lt;FElem&gt;();
<a name="l00110"></a>00110             <span class="keywordflow">try</span>
<a name="l00111"></a>00111             {
<a name="l00112"></a>00112                 <span class="keywordflow">if</span> (reader.ReadState == ReadState.Initial)
<a name="l00113"></a>00113                 {
<a name="l00114"></a>00114                     reader.Read();
<a name="l00115"></a>00115                 }
<a name="l00116"></a>00116                 <span class="keywordflow">while</span> (reader.ReadState == ReadState.Interactive)
<a name="l00117"></a>00117                 {
<a name="l00118"></a>00118                     <span class="keywordflow">switch</span> (reader.NodeType)
<a name="l00119"></a>00119                     {
<a name="l00120"></a>00120                         <span class="keywordflow">case</span> XmlNodeType.Element:
<a name="l00121"></a>00121                             <span class="comment">//Create the element and add it to the parent or list</span>
<a name="l00122"></a>00122                             FElem elem = <span class="keyword">new</span> FElem(<span class="keyword">new</span> QNm(reader.Name.Token()));
<a name="l00123"></a>00123                             AddNode(elem, nodes, parents);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                             <span class="comment">//Add attributes</span>
<a name="l00126"></a>00126                             <span class="keywordflow">if</span> (reader.HasAttributes)
<a name="l00127"></a>00127                             {
<a name="l00128"></a>00128                                 <span class="keywordflow">while</span> (reader.MoveToNextAttribute())
<a name="l00129"></a>00129                                 {
<a name="l00130"></a>00130                                     elem.add(<span class="keyword">new</span> FAttr(<span class="keyword">new</span> QNm(reader.Name.Token()), reader.Value.Token()));
<a name="l00131"></a>00131                                 }
<a name="l00132"></a>00132                                 reader.MoveToElement();
<a name="l00133"></a>00133                             }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135                             <span class="comment">//Push to the parents stack if not empty</span>
<a name="l00136"></a>00136                             <span class="keywordflow">if</span> (!reader.IsEmptyElement)
<a name="l00137"></a>00137                             {
<a name="l00138"></a>00138                                 parents.Push(elem);
<a name="l00139"></a>00139                             }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141                             <span class="keywordflow">break</span>;
<a name="l00142"></a>00142                         <span class="keywordflow">case</span> XmlNodeType.EndElement:
<a name="l00143"></a>00143                             parents.Pop();
<a name="l00144"></a>00144                             <span class="keywordflow">break</span>;
<a name="l00145"></a>00145                         <span class="keywordflow">case</span> XmlNodeType.Comment:
<a name="l00146"></a>00146                             AddNode(<span class="keyword">new</span> FComm(reader.Value.Token()), nodes, parents);
<a name="l00147"></a>00147                             <span class="keywordflow">break</span>;
<a name="l00148"></a>00148                         <span class="keywordflow">case</span> XmlNodeType.Text:
<a name="l00149"></a>00149                         <span class="keywordflow">case</span> XmlNodeType.SignificantWhitespace:
<a name="l00150"></a>00150                         <span class="keywordflow">case</span> XmlNodeType.Whitespace:
<a name="l00151"></a>00151                             AddNode(<span class="keyword">new</span> FTxt(reader.Value.Token()), nodes, parents);
<a name="l00152"></a>00152                             <span class="keywordflow">break</span>;
<a name="l00153"></a>00153                         <span class="keywordflow">case</span> XmlNodeType.ProcessingInstruction:
<a name="l00154"></a>00154                             AddNode(<span class="keyword">new</span> FPI(<span class="keyword">new</span> QNm(reader.Name.Token()), reader.Value.Token()), nodes, parents);
<a name="l00155"></a>00155                             <span class="keywordflow">break</span>;
<a name="l00156"></a>00156                     }
<a name="l00157"></a>00157                     reader.Read();
<a name="l00158"></a>00158                 }
<a name="l00159"></a>00159                 <span class="keywordflow">return</span> nodes.ToArray();
<a name="l00160"></a>00160             }
<a name="l00161"></a>00161             <span class="keywordflow">catch</span> (Exception)
<a name="l00162"></a>00162             {
<a name="l00163"></a>00163                 <span class="keywordflow">return</span> null;
<a name="l00164"></a>00164             }
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167         <span class="comment">//Helper method for the GetNodes method</span>
<a name="l00168"></a>00168         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">void</span> AddNode(FNode node, List&lt;ANode&gt; nodes, Stack&lt;FElem&gt; parents)
<a name="l00169"></a>00169         {
<a name="l00170"></a>00170             <span class="keywordflow">if</span> (parents.Count &gt; 0)
<a name="l00171"></a>00171             {
<a name="l00172"></a>00172                 parents.Peek().add(node);
<a name="l00173"></a>00173             }
<a name="l00174"></a>00174             <span class="keywordflow">else</span>
<a name="l00175"></a>00175             {
<a name="l00176"></a>00176                 nodes.Add(node);
<a name="l00177"></a>00177             }
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179         
<a name="l00180"></a>00180         <span class="comment">// Helper to execute a method that takes an XmlReader given a string</span>
<a name="l00181"></a>00181         <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keywordtype">void</span> CallWithString(<span class="keywordtype">string</span> content, Action&lt;XmlReader&gt; action)
<a name="l00182"></a>00182         {
<a name="l00183"></a>00183             <span class="keywordflow">if</span> (content == null) <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="stringliteral">&quot;content&quot;</span>);
<a name="l00184"></a>00184             <span class="keyword">using</span> (StringReader stringReader = <span class="keyword">new</span> StringReader(content))
<a name="l00185"></a>00185             {
<a name="l00186"></a>00186                 <span class="keyword">using</span> (XmlReader xmlReader = XmlReader.Create(stringReader, Helper.ReaderSettings))
<a name="l00187"></a>00187                 {
<a name="l00188"></a>00188                     action(xmlReader);
<a name="l00189"></a>00189                 }
<a name="l00190"></a>00190             }
<a name="l00191"></a>00191         }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="keyword">internal</span> <span class="keyword">static</span> <span class="keywordtype">void</span> CallWithString&lt;T&gt;(<span class="keywordtype">string</span> content, T param, Action&lt;T, XmlReader&gt; action)
<a name="l00194"></a>00194         {
<a name="l00195"></a>00195             <span class="keywordflow">if</span> (content == null) <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="stringliteral">&quot;content&quot;</span>);
<a name="l00196"></a>00196             <span class="keyword">using</span> (StringReader stringReader = <span class="keyword">new</span> StringReader(content))
<a name="l00197"></a>00197             {
<a name="l00198"></a>00198                 <span class="keyword">using</span> (XmlReader xmlReader = XmlReader.Create(stringReader, Helper.ReaderSettings))
<a name="l00199"></a>00199                 {
<a name="l00200"></a>00200                     action(param, xmlReader);
<a name="l00201"></a>00201                 }
<a name="l00202"></a>00202             }
<a name="l00203"></a>00203         }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205         <span class="keyword">internal</span> <span class="keyword">static</span> T CallWithString&lt;T&gt;(<span class="keywordtype">string</span> content, Func&lt;XmlReader, T&gt; func)
<a name="l00206"></a>00206         {
<a name="l00207"></a>00207             <span class="keywordflow">if</span> (content == null) <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="stringliteral">&quot;content&quot;</span>);
<a name="l00208"></a>00208             <span class="keyword">using</span> (StringReader stringReader = <span class="keyword">new</span> StringReader(content))
<a name="l00209"></a>00209             {
<a name="l00210"></a>00210                 <span class="keyword">using</span> (XmlReader xmlReader = XmlReader.Create(stringReader, Helper.ReaderSettings))
<a name="l00211"></a>00211                 {
<a name="l00212"></a>00212                     <span class="keywordflow">return</span> func(xmlReader);
<a name="l00213"></a>00213                 }
<a name="l00214"></a>00214             }
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217         <span class="keyword">internal</span> <span class="keyword">static</span> TR CallWithString&lt;TP, TR&gt;(<span class="keywordtype">string</span> content, TP param, Func&lt;TP, XmlReader, TR&gt; func)
<a name="l00218"></a>00218         {
<a name="l00219"></a>00219             <span class="keywordflow">if</span> (content == null) <span class="keywordflow">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="stringliteral">&quot;content&quot;</span>);
<a name="l00220"></a>00220             <span class="keyword">using</span> (StringReader stringReader = <span class="keyword">new</span> StringReader(content))
<a name="l00221"></a>00221             {
<a name="l00222"></a>00222                 <span class="keyword">using</span> (XmlReader xmlReader = XmlReader.Create(stringReader, Helper.ReaderSettings))
<a name="l00223"></a>00223                 {
<a name="l00224"></a>00224                     <span class="keywordflow">return</span> func(param, xmlReader);
<a name="l00225"></a>00225                 }
<a name="l00226"></a>00226             }
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229 }
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Thu Mar 15 2012 12:27:19 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.0
</small></address>

</body>
</html>
