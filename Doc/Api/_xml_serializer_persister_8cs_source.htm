<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>

<title>C:/Code/Nxdb/Nxdb/Persistence/XmlSerializerPersister.cs Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<!-- Generated by Doxygen 1.8.0 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="dynsections.js"></script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Events</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">C:/Code/Nxdb/Nxdb/Persistence/XmlSerializerPersister.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_xml_serializer_persister_8cs.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 ï»¿<span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright 2012 WildCard, LLC</span>
<a name="l00003"></a>00003 <span class="comment"> * </span>
<a name="l00004"></a>00004 <span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
<a name="l00005"></a>00005 <span class="comment"> * you may not use this file except in compliance with the License.</span>
<a name="l00006"></a>00006 <span class="comment"> * You may obtain a copy of the License at</span>
<a name="l00007"></a>00007 <span class="comment"> * </span>
<a name="l00008"></a>00008 <span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00009"></a>00009 <span class="comment"> * </span>
<a name="l00010"></a>00010 <span class="comment"> * Unless required by applicable law or agreed to in writing, software</span>
<a name="l00011"></a>00011 <span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00013"></a>00013 <span class="comment"> * See the License for the specific language governing permissions and</span>
<a name="l00014"></a>00014 <span class="comment"> * limitations under the License.</span>
<a name="l00015"></a>00015 <span class="comment"> * </span>
<a name="l00016"></a>00016 <span class="comment"> */</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 <span class="keyword">using</span> System;
<a name="l00019"></a>00019 <span class="keyword">using</span> System.IO;
<a name="l00020"></a>00020 <span class="keyword">using</span> System.Linq;
<a name="l00021"></a>00021 <span class="keyword">using</span> System.Reflection;
<a name="l00022"></a>00022 <span class="keyword">using</span> System.Text;
<a name="l00023"></a>00023 <span class="keyword">using</span> System.Xml;
<a name="l00024"></a>00024 <span class="keyword">using</span> System.Xml.Serialization;
<a name="l00025"></a>00025 <span class="keyword">using</span> Nxdb.Node;
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="keyword">namespace </span>Nxdb.Persistence
<a name="l00028"></a>00028 {
<a name="l00029"></a>00029     <span class="comment">// Storing with this persister is destructive. That is, a store operation will delete all the current</span>
<a name="l00030"></a>00030     <span class="comment">// content of the node and replace it with new content. This is invalidate all child nodes on store.</span>
<a name="l00031"></a>00031     <span class="comment">// If any other objects are attached to child nodes, they will be automatically detached when this</span>
<a name="l00032"></a>00032     <span class="comment">// object is stored due to the child node invalidation.</span>
<a name="l00033"></a>00033     <span class="comment">// TODO: Once the matching algorithm has been reimplemented, use that for store operations instead of total replacement</span>
<a name="l00034"></a>00034     <span class="keyword">internal</span> <span class="keyword">class </span>XmlSerializerPersister : Persister
<a name="l00035"></a>00035     {
<a name="l00036"></a>00036         <span class="keyword">private</span> readonly XmlWriterSettings _writerSettings;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038         <span class="keyword">public</span> XmlSerializerPersister(XmlWriterSettings writerSettings)
<a name="l00039"></a>00039         {
<a name="l00040"></a>00040             _writerSettings = writerSettings;
<a name="l00041"></a>00041         }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043         <span class="keyword">public</span> XmlSerializerPersister()
<a name="l00044"></a>00044         {
<a name="l00045"></a>00045             _writerSettings = Helper.WriterSettings.Clone();
<a name="l00046"></a>00046         }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048         <span class="keyword">internal</span> <span class="keyword">override</span> <span class="keywordtype">void</span> Fetch(<a class="code" href="class_nxdb_1_1_node_1_1_element.htm" title="Representation of an XML element node.">Element</a> element, <span class="keywordtype">object</span> target, TypeCache typeCache, Cache cache)
<a name="l00049"></a>00049         {
<a name="l00050"></a>00050             <span class="keywordflow">if</span> (target == null) <span class="keywordflow">return</span>;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052             <span class="comment">// Deserialize the object</span>
<a name="l00053"></a>00053             XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(typeCache.Type);
<a name="l00054"></a>00054             <span class="keywordtype">object</span> deserialized;
<a name="l00055"></a>00055             <span class="keyword">using</span>(TextReader reader = <span class="keyword">new</span> StringReader(element.<a class="code" href="class_nxdb_1_1_node_1_1_container_node.htm#a17e85e05add99608409cdb4a309faa53" title="Gets the outer XML content of this node.">OuterXml</a>))
<a name="l00056"></a>00056             {
<a name="l00057"></a>00057                 deserialized = serializer.Deserialize(reader);
<a name="l00058"></a>00058             }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060             <span class="comment">// Deep copy the deserialized object to the target object</span>
<a name="l00061"></a>00061             <span class="keywordflow">foreach</span>(FieldInfo field <span class="keywordflow">in</span> typeCache.Fields)
<a name="l00062"></a>00062             {
<a name="l00063"></a>00063                 <span class="keywordtype">object</span> value = field.GetValue(deserialized);
<a name="l00064"></a>00064                 field.SetValue(target, value);
<a name="l00065"></a>00065             }
<a name="l00066"></a>00066         }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         <span class="keyword">internal</span> <span class="keyword">override</span> <span class="keywordtype">object</span> Serialize(<span class="keywordtype">object</span> source, TypeCache typeCache, Cache cache)
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070             <span class="keywordflow">if</span> (source == null) <span class="keywordflow">return</span> null;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072             <span class="comment">// Serialize the object</span>
<a name="l00073"></a>00073             <span class="comment">// Use an empty namespace object to prevent default namespace declarations</span>
<a name="l00074"></a>00074             XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(typeCache.Type);
<a name="l00075"></a>00075             XmlSerializerNamespaces namespaces = <span class="keyword">new</span> XmlSerializerNamespaces();
<a name="l00076"></a>00076             namespaces.Add(String.Empty, String.Empty);
<a name="l00077"></a>00077             StringBuilder content = <span class="keyword">new</span> StringBuilder();
<a name="l00078"></a>00078             <span class="keyword">using</span> (XmlWriter writer = XmlWriter.Create(content, _writerSettings))
<a name="l00079"></a>00079             {
<a name="l00080"></a>00080                 serializer.Serialize(writer, source, namespaces);
<a name="l00081"></a>00081             }
<a name="l00082"></a>00082             <span class="keywordflow">return</span> content.ToString();
<a name="l00083"></a>00083         }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <span class="keyword">internal</span> <span class="keyword">override</span> <span class="keywordtype">void</span> Store(<a class="code" href="class_nxdb_1_1_node_1_1_element.htm" title="Representation of an XML element node.">Element</a> element, <span class="keywordtype">object</span> serialized, <span class="keywordtype">object</span> source, TypeCache typeCache, Cache cache)
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087             <span class="keywordflow">if</span> (source == null || serialized == null) <span class="keywordflow">return</span>;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089             <span class="comment">// Replace the element content in the database with the new content</span>
<a name="l00090"></a>00090             <span class="keyword">using</span> (TextReader textReader = <span class="keyword">new</span> StringReader((<span class="keywordtype">string</span>)serialized))
<a name="l00091"></a>00091             {
<a name="l00092"></a>00092                 <span class="keyword">using</span>(XmlReader reader = XmlReader.Create(textReader))
<a name="l00093"></a>00093                 {
<a name="l00094"></a>00094                     <span class="comment">// Move to the root element</span>
<a name="l00095"></a>00095                     reader.MoveToContent();
<a name="l00096"></a>00096 
<a name="l00097"></a>00097                     <span class="comment">// Replace all attributes</span>
<a name="l00098"></a>00098                     element.<a class="code" href="class_nxdb_1_1_node_1_1_element.htm#a9995301e318bb4b3795ab778805b9881" title="Removes all the attributes from this element. This can only be used on database nodes. If the node is invalid this does nothing.">RemoveAllAttributes</a>();
<a name="l00099"></a>00099                     <span class="keywordflow">if</span>(reader.HasAttributes)
<a name="l00100"></a>00100                     {
<a name="l00101"></a>00101                         <span class="keywordflow">while</span>(reader.MoveToNextAttribute())
<a name="l00102"></a>00102                         {
<a name="l00103"></a>00103                             element.<a class="code" href="class_nxdb_1_1_node_1_1_element.htm#a271dad5f63ab11be40e3ffab82ebbb21" title="Inserts a new attribute with the specified name and value.">InsertAttribute</a>(reader.Name, reader.Value);
<a name="l00104"></a>00104                         }
<a name="l00105"></a>00105                         reader.MoveToElement();
<a name="l00106"></a>00106                     }
<a name="l00107"></a>00107                         
<a name="l00108"></a>00108                     <span class="comment">// Replace the child content</span>
<a name="l00109"></a>00109                     <span class="comment">// Need to use an intermediate string since there is no way to</span>
<a name="l00110"></a>00110                     <span class="comment">// get the &quot;inner XML&quot; of an XmlReader without getting the</span>
<a name="l00111"></a>00111                     <span class="comment">// parent element too</span>
<a name="l00112"></a>00112                     element.<a class="code" href="class_nxdb_1_1_node_1_1_container_node.htm#aa01a138aa00c19cade613679a1f2d1cb" title="Gets or sets the inner XML content of this node.">InnerXml</a> = reader.ReadInnerXml();
<a name="l00113"></a>00113                 }
<a name="l00114"></a>00114             }
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116     }
<a name="l00117"></a>00117 }
</pre></div></div><!-- contents -->


<hr class="footer"/><address class="footer"><small>
Generated on Thu Mar 15 2012 12:17:34 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.0
</small></address>

</body>
</html>
