<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NiceThreads</name>
    </assembly>
    <members>
        <member name="T:NiceThreads.DisposableLock">
            <summary>
            Base class for ILocker wrappers that implement the disposable pattern.
            </summary>
        </member>
        <member name="M:NiceThreads.DisposableLock.Dispose">
            <summary>
            Unlocks the ILocker.
            </summary>
        </member>
        <member name="P:NiceThreads.DisposableLock.Locker">
            <summary>
            Gets the ILocker that this DisposableLock wraps.
            </summary>
        </member>
        <member name="T:NiceThreads.ISyncObject`1">
            <summary>
            Provides a thread-safe wrapper around objects that normally wouldn't be thread-safe.
            </summary>
            <typeparam name="T">The type of the object to be wrapped.</typeparam>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.ReadLock">
            <summary>
            Gets a disposable read lock for the wrapped object.
            After obtaining the lock, the wrapped object can safely be
            used with the Unsync property until the lock is disposed.
            </summary>
            <returns>A object that holds the lock until it is disposed.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.UpgradeableReadLock">
            <summary>
            Gets a disposable upgradeable read lock for the wrapped object.
            After obtaining the lock, the wrapped object can safely be
            used with the Unsync property until the lock is disposed.
            </summary>
            <returns>A object that holds the lock until it is disposed.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.WriteLock">
            <summary>
            Gets a disposable write lock for the wrapped object. 
            After obtaining the lock, the wrapped object can safely be
            used with the Unsync property until the lock is disposed.
            </summary>
            <returns>A object that holds the lock until it is disposed.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.ReadLock(System.TimeSpan)">
            <summary>
            Gets a disposable read lock for the wrapped object.
            After obtaining the lock, the wrapped object can safely be
            used with the Unsync property until the lock is disposed.
            </summary>
            <param name="timeout">The amount of time to wait for the lock before an exception is thrown.</param>
            <returns>A object that holds the lock until it is disposed.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.UpgradeableReadLock(System.TimeSpan)">
            <summary>
            Gets a disposable upgradeable read lock for the wrapped object.
            After obtaining the lock, the wrapped object can safely be
            used with the Unsync property until the lock is disposed.
            </summary>
            <param name="timeout">The amount of time to wait for the lock before an exception is thrown.</param>
            <returns>A object that holds the lock until it is disposed.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.WriteLock(System.TimeSpan)">
            <summary>
            Gets a disposable write lock for the wrapped object. 
            After obtaining the lock, the wrapped object can safely be
            used with the Unsync property until the lock is disposed.
            </summary>
            <param name="timeout">The amount of time to wait for the lock before an exception is thrown.</param>
            <returns>A object that holds the lock until it is disposed.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.DoRead(System.Action{`0})">
            <summary>
            Locks the wrapped object for reading for the duration of an action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.DoWrite(System.Action{`0})">
            <summary>
            Locks the wrapped object for writing for the duration of an action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.DoRead``1(System.Func{`0,``0})">
            <summary>
            Locks the wrapped object for reading for the duration of a function.
            </summary>
            <typeparam name="TR">The return type.</typeparam>
            <param name="func">The function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:NiceThreads.ISyncObject`1.DoWrite``1(System.Func{`0,``0})">
            <summary>
            Locks the wrapped object for writing for the duration of a function.
            </summary>
            <typeparam name="TR">The return type.</typeparam>
            <param name="func">The function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="P:NiceThreads.ISyncObject`1.Locker">
            <summary>
            Gets the ILocker used to manage access to the wrapped object.
            </summary>
        </member>
        <member name="P:NiceThreads.ISyncObject`1.Sync">
            <summary>
            Gets a thread-safe synchronized reference to the wrapped object.
            </summary>
        </member>
        <member name="P:NiceThreads.ISyncObject`1.Unsync">
            <summary>
            Gets an unsafe/unsynchronized reference to the wrapped object.
            </summary>
        </member>
        <member name="T:NiceThreads.SyncEnumerator`1">
            <summary>
            Provides thread-safe enumeration capabilities.
            Based on code from http://www.codeproject.com/KB/cs/safe_enumerable.aspx.
            </summary>
            <typeparam name="T">The type of the objects being enumerated.</typeparam>
        </member>
        <member name="T:NiceThreads.SyncObject`1">
            <summary>
            Implements a thread-safe wrapper around objects that normally wouldn't be thread-safe.
            Uses a ReaderWriterLockSlim locking object if an alternate ILocker isn't specified.
            </summary>
            <typeparam name="T">The type of the object to be wrapped.</typeparam>
        </member>
        <member name="T:NiceThreads.ReadOnlySyncObject`1">
            <summary>
            Mimics the semantics of a readonly field in that the underlying object cannot be changed once constructed.
            Uses a ReaderWriterLockSlim locking object if an alternate ILocker isn't specified.
            </summary>
            <typeparam name="T">The type of the object to be wrapped.</typeparam>
        </member>
        <member name="T:NiceThreads.ReaderWriterLockSlimLocker">
            <summary>
            Provides an ILocker implementation for the ReaderWriterLockSlim class.
            </summary>
        </member>
        <member name="T:NiceThreads.ILocker">
            <summary>
            A consistent wrapper for different types of locking primitives. Not all
            methods have appropriate analogs for all lock types (for example, the standard
            Monitor class does not distinguish between read and write locks, so all methods
            in this class just lock the Monitor).
            </summary>
        </member>
        <member name="T:NiceThreads.MonitorLocker">
            <summary>
            Provides an ILocker implementation for the Monitor class.
            </summary>
        </member>
    </members>
</doc>
